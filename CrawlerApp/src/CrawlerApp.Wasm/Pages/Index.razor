@page "/"
@using CrawlerApp.Application.Common.Models.OrderEvent;
@using CrawlerApp.Application.Common.Models.Product;
@using CrawlerApp.Application.Features.OrderEvents.Commands.Add;
@using CrawlerApp.Application.Features.Orders.Commands.Add;
@using CrawlerApp.Application.Features.Products.Commands.Add;
@using CrawlerApp.Domain.Entities;
@using MediatR;
@using Microsoft.AspNetCore.SignalR.Client;
@using CrawlerApp.Domain.Enums;
@inject HttpClient HttpClient

@*<TextEdit Style="margin-bottom: 20px;" MaskType="MaskType.RegEx" EditMask="^[0-9]*$" @bind-Value="requestedAmount" />*@

<Div class="d-flex justify-content-center" Style="margin-bottom: 20px;">
    <Button Color="Color.Primary" Style="margin-right: 10px;" Size="Size.Large" @onclick="CreateGetAllProductsOrder" Outline>Get All Products</Button>
    <Button Color="Color.Success" Style="margin-right: 10px;" Size="Size.Large" @onclick="CreateGetOnDiscountedProductsOrder" Outline>Get On Discount Products</Button>
    <Button Color="Color.Warning" Size="Size.Large" @onclick="CreateGetNonDiscountedProductsOrder" Outline>Get Non Discount Products</Button>
</Div>

<div class=fakeMenu>
    <div class="fakeButtons fakeClose"></div>
    <div class="fakeButtons fakeMinimize"></div>
    <div class="fakeButtons fakeZoom"></div>
</div>
<div class="fakeScreen">
    @foreach (var log in events)
    {
        <p class="line1">@log.SentOn.ToString("g") | @log.Message</p>
    }
</div>


@code {
    private int requestedAmount;
    private OrderAddCommand order = new OrderAddCommand();
    //private OrderEventAddCommand orderEvent = new OrderEventAddCommand();
    private ProductAddCommand command = new ProductAddCommand();

    private List<ProductAddCommand> onDiscountedProducts = new List<ProductAddCommand>();
    private List<ProductAddCommand> nonDiscountedProducts = new List<ProductAddCommand>();

    private List<OrderEventDto> events = new List<OrderEventDto>();

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:7015/Hubs/CrawlerLogHub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<OrderEventDto>("NewSeleniumLogAdded", (seleniumLogDto) =>
        {
            events.Add(seleniumLogDto);

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await base.OnInitializedAsync();
    }

    private async Task CreateGetAllProductsOrder()
    {
        order.Id = Guid.NewGuid();
        order.ProductCrawlType = ProductCrawlType.All;
        await HttpClient.PostAsJsonAsync("Orders", order);

        hubConnection = new HubConnectionBuilder()
        .WithUrl($"https://localhost:7015/Hubs/CrawlerLogHub")
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<ProductDto>("GetAll", async (productDto) =>
        {
            command.Id = productDto.Id;
            command.Name = productDto.Name;
            command.Picture = productDto.Picture;
            command.Price = productDto.Price;
            command.SalePrice = productDto.SalePrice;
            command.IsOnSale = productDto.IsOnSale;
            command.OrderId = order.Id;

            await HttpClient.PostAsJsonAsync("Products", command);
        });

        await hubConnection.StartAsync();
    }

    private async Task CreateGetOnDiscountedProductsOrder()
    {
        order.Id = Guid.NewGuid();
        order.ProductCrawlType = ProductCrawlType.OnDiscount;
        await HttpClient.PostAsJsonAsync("Orders", order);

        hubConnection = new HubConnectionBuilder()
        .WithUrl($"https://localhost:7015/Hubs/CrawlerLogHub")
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<ProductDto>("GetAll", async (productDto) =>
        {
            if (productDto.IsOnSale == true)
            {
                command.Id = productDto.Id;
                command.Name = productDto.Name;
                command.Picture = productDto.Picture;
                command.Price = productDto.Price;
                command.SalePrice = productDto.SalePrice;
                command.IsOnSale = productDto.IsOnSale;
                command.OrderId = order.Id;

                await HttpClient.PostAsJsonAsync("Products", command);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task CreateGetNonDiscountedProductsOrder()
    {
        order.Id = Guid.NewGuid();
        order.ProductCrawlType = ProductCrawlType.NonDiscount;
        await HttpClient.PostAsJsonAsync("Orders", order);

        hubConnection = new HubConnectionBuilder()
        .WithUrl($"https://localhost:7015/Hubs/CrawlerLogHub")
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<ProductDto>("GetAll", async (productDto) =>
        {
            if (productDto.IsOnSale == false)
            {
                command.Id = productDto.Id;
                command.Name = productDto.Name;
                command.Picture = productDto.Picture;
                command.Price = productDto.Price;
                command.SalePrice = productDto.SalePrice;
                command.IsOnSale = productDto.IsOnSale;
                command.OrderId = order.Id;
            }

            await HttpClient.PostAsJsonAsync("Products", command);
        });

        await hubConnection.StartAsync();
    }
}

<style>
    body {
        padding: 10px;
    }

    .fakeButtons {
        height: 10px;
        width: 10px;
        border-radius: 50%;
        border: 1px solid #000;
        position: relative;
        top: 6px;
        left: 6px;
        background-color: #ff3b47;
        border-color: #9d252b;
        display: inline-block;
    }

    .fakeMinimize {
        left: 11px;
        background-color: #ffc100;
        border-color: #9d802c;
    }

    .fakeZoom {
        left: 16px;
        background-color: #00d742;
        border-color: #049931;
    }

    .fakeMenu {
        width: 75%;
        box-sizing: border-box;
        height: 25px;
        background-color: #bbb;
        margin: 0 auto;
        border-top-right-radius: 5px;
        border-top-left-radius: 5px;
    }

    .fakeScreen {
        background-color: #151515;
        box-sizing: border-box;
        width: 75%;
        margin: 0 auto;
        padding: 20px;
        border-bottom-left-radius: 5px;
        border-bottom-right-radius: 5px;
    }

    p {
        position: relative;
        left: 35%;
        width: 75%;
        margin-left: -8.5em;
        text-align: left;
        font-size: 1.25em;
        font-family: monospace;
        white-space: nowrap;
        overflow: hidden;
    }

    span {
        color: #fff;
        font-weight: bold;
    }

    .line1 {
        color: #9CD9F0;
        /* -webkit-animation: type .5s 1s steps(20, end) forwards;
          -moz-animation: type .5s 1s steps(20, end) forwards;
          -o-animation: type .5s 1s steps(20, end) forwards;
          animation: type .5s 1s steps(20, end) forwards;*/
    }

    .cursor1 {
        -webkit-animation: blink 1s 2s 2 forwards;
        -moz-animation: blink 1s 2s 2 forwards;
        -o-animation: blink 1s 2s 2 forwards;
        animation: blink 1s 2s 2 forwards;
    }

    .line2 {
        color: #CDEE69;
        -webkit-animation: type .5s 4.25s steps(20, end) forwards;
        -moz-animation: type .5s 4.25s steps(20, end) forwards;
        -o-animation: type .5s 4.25s steps(20, end) forwards;
        animation: type .5s 4.25s steps(20, end) forwards;
    }

    .cursor2 {
        -webkit-animation: blink 1s 5.25s 2 forwards;
        -moz-animation: blink 1s 5.25s 2 forwards;
        -o-animation: blink 1s 5.25s 2 forwards;
        animation: blink 1s 5.25s 2 forwards;
    }

    .line3 {
        color: #E09690;
        -webkit-animation: type .5s 7.5s steps(20, end) forwards;
        -moz-animation: type .5s 7.5s steps(20, end) forwards;
        -o-animation: type .5s 7.5s steps(20, end) forwards;
        animation: type .5s 7.5s steps(20, end) forwards;
    }

    .cursor3 {
        -webkit-animation: blink 1s 8.5s 2 forwards;
        -moz-animation: blink 1s 8.5s 2 forwards;
        -o-animation: blink 1s 8.5s 2 forwards;
        animation: blink 1s 8.5s 2 forwards;
    }

    .line4 {
        color: #fff;
        -webkit-animation: type .5s 10.75s steps(20, end) forwards;
        -moz-animation: type .5s 10.75s steps(20, end) forwards;
        -o-animation: type .5s 10.75s steps(20, end) forwards;
        animation: type .5s 10.75s steps(20, end) forwards;
    }

    .cursor4 {
        -webkit-animation: blink 1s 11.5s infinite;
        -moz-animation: blink 1s 8.5s infinite;
        -o-animation: blink 1s 8.5s infinite;
        animation: blink 1s 8.5s infinite;
    }

    @@-webkit-keyframes blink {
        0% {
            opacity: 0;
        }

        40% {
            opacity: 0;
        }

        50% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }

    @@-moz-keyframes blink {
        0% {
            opacity: 0;
        }

        40% {
            opacity: 0;
        }

        50% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }

    @@-o-keyframes blink {
        0% {
            opacity: 0;
        }

        40% {
            opacity: 0;
        }

        50% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }

    @@keyframes blink {
        0% {
            opacity: 0;
        }

        40% {
            opacity: 0;
        }

        50% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }

    @@-webkit-keyframes type {
        to {
            width: 17em;
        }
    }

    @@-moz-keyframes type {
        to {
            width: 17em;
        }
    }

    @@-o-keyframes type {
        to {
            width: 17em;
        }
    }

    @@keyframes type {
        to {
            width: 17em;
        }
    }
</style>